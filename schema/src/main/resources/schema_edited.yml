openapi: 3.0.3
info:
  title: People Cars - OpenAPI 3.0
  description: |-
    Open API for People and Cars API (Encora Traning).
  termsOfService: http://swagger.io/terms/
  contact:
    email: vmcanseco@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:8080/api
tags:
  - name: people
    description: Opertions about People
  - name: cars
    description: Operations about Car
paths:
  /people/{person_id}:
    get:
      tags:
        - people
      summary: Find person by Id
      description: Return a single person
      operationId: getPersonById
      parameters:
        - name: person_id
          in: path
          description: Person Id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfull operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/People'
            application/xml:
              schema:
                $ref: '#/components/schemas/People'
        '404':
          description: Person not found
    put:
      tags:
        - people
      summary: Update an existing person
      description: Upate an existing person
      operationId: updatePerson
      parameters:
        - name: person_id
          in: path
          description: Person Id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Update a person
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/People'
          application/xml:
            schema:
              $ref: '#/components/schemas/People'
      responses:
        '200':
          description: Successfull operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/People'
            application/xml:
              schema:
                $ref: '#/components/schemas/People'
        '404':
          description: Person not found
    delete:
      tags:
        - people
      summary: Delete a person by Id
      description: Delete a person by Id
      operationId: deletePerson
      parameters:
        - name: person_id
          in: path
          description: Person Id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successfull operation
        '404':
          description: Person not found
  /people/{person_id}/car:
    get:
      tags:
        - people
      summary: Find all person's cars
      description: Returns all cars beloging to a person
      operationId: getPersonCars
      parameters:
        - name: person_id
          in: path
          description: Person Id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfull operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Car'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Car'
                xml:
                  name: car
        '404':
          description: Person not found
    post:
      tags:
        - people
      summary: Link car to a person
      description: Link car to a person
      operationId: addCar
      parameters:
        - name: person_id
          in: path
          description: Person Id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Add car to a person
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
          application/xml:
            schema:
              $ref: '#/components/schemas/Car'
      responses:
        '200':
          description: Successfull operation
        '404':
          description: Person not found
    delete:
      tags:
        - people
      summary: Remove car from a person
      description: Remove car to a person
      operationId: removeCar
      parameters:
        - name: person_id
          in: path
          description: Person Id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successfull operation
        '404':
          description: Person not found

  /people:
    post:
      tags:
        - people
      summary: Add a new person
      description: Create a person
      operationId: createPerson
      requestBody:
        required: true
        description: Create a person
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/People'
          application/xml:
            schema:
              $ref: '#/components/schemas/People'
      responses:
        '201':
          description: Successfull operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/People'
            application/xml:
              schema:
                $ref: '#/components/schemas/People'
        '500':
          description: Unexpected errror
    get:
      tags:
        - people
      summary: Get all people
      description: Returns all people
      operationId: getAllPeople
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/People'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/People'
                xml:
                  name: people
  /cars:
    get:
      tags:
        - cars
      summary: Get all cars
      description: Returns all cars
      operationId: getAllCars
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Car'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Car'
    post:
      tags:
        - cars
      summary: Add a new car
      description: Create a car
      operationId: createCar
      requestBody:
        required: true
        description: Create a Car
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
          application/xml:
            schema:
              $ref: '#/components/schemas/Car'
      responses:
        '201':
          description: Successfull operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
            application/xml:
              schema:
                $ref: '#/components/schemas/Car'
        '500':
          description: Unexpected errror
  /cars/{car_vin}:
    get:
      tags:
        - cars
      summary: Find car by VIN
      description: Return a single car
      operationId: getCarByVin
      parameters:
        - name: car_vin
          in: path
          description: Car VIN
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfull operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
            application/xml:
              schema:
                $ref: '#/components/schemas/Car'
        '404':
          description: Car not found
    put:
      tags:
        - cars
      summary: Update an existing car
      description: Upate an existing car
      operationId: updateCar
      parameters:
        - name: car_vin
          in: path
          description: Car VIN
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Update a car
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
          application/xml:
            schema:
              $ref: '#/components/schemas/Car'
      responses:
        '200':
          description: Successfull operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
            application/xml:
              schema:
                $ref: '#/components/schemas/Car'
        '404':
          description: Car not found
    delete:
      tags:
        - cars
      summary: Delete a car by VIN
      description: Delete a person by VIN
      operationId: deleteCar
      parameters:
        - name: car_vin
          in: path
          description: Car VIN
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successfull operation
        '404':
          description: Car not found
  /car/{car_vin}/people:
    get:
      tags:
        - cars
      summary: Find all people owning a car
      description: Returns all people associate to a car
      operationId: getAllCarPeople
      parameters:
        - name: car_vin
          in: path
          description: Car VIN
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfull operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/People'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/People'
                xml:
                  name: people
        '404':
          description: Car not found
components:
  schemas:
    Car:
      type: object
      properties:
        vin:
          type: string
          example: 00000100001
        brand:
          type: string
          example: ford
        model:
          type: string
          example: ikon
        color:
          type: string
          example: red
        year:
          type: integer
          format: int16
      xml:
        name: car
    People:
      required:
        - firstName
        - lastName
        - email
        - gender
      type: object
      properties:
        id:
          type: string
          example: 07327fea-c992-4c90-a57d-ab70c482bb71
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: mymail@mail.com
        gender:
          type: string
          example: female
          enum:
            - male
            - famale
            - non-binary
            - fluid
        cars:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Car'
      xml:
        name: people
